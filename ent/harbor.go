// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/andrewmthomas87/catan/ent/harbor"
	"github.com/andrewmthomas87/catan/ent/settlement"
)

// Harbor is the model entity for the Harbor schema.
type Harbor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// X holds the value of the "x" field.
	X int `json:"x,omitempty"`
	// Y holds the value of the "y" field.
	Y int `json:"y,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource harbor.Resource `json:"resource,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HarborQuery when eager-loading is set.
	Edges             HarborEdges `json:"edges"`
	settlement_harbor *int
}

// HarborEdges holds the relations/edges for other nodes in the graph.
type HarborEdges struct {
	// Settlement holds the value of the settlement edge.
	Settlement *Settlement `json:"settlement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SettlementOrErr returns the Settlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HarborEdges) SettlementOrErr() (*Settlement, error) {
	if e.loadedTypes[0] {
		if e.Settlement == nil {
			// The edge settlement was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: settlement.Label}
		}
		return e.Settlement, nil
	}
	return nil, &NotLoadedError{edge: "settlement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Harbor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case harbor.FieldID, harbor.FieldX, harbor.FieldY:
			values[i] = &sql.NullInt64{}
		case harbor.FieldResource:
			values[i] = &sql.NullString{}
		case harbor.ForeignKeys[0]: // settlement_harbor
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Harbor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Harbor fields.
func (h *Harbor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case harbor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case harbor.FieldX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				h.X = int(value.Int64)
			}
		case harbor.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				h.Y = int(value.Int64)
			}
		case harbor.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				h.Resource = harbor.Resource(value.String)
			}
		case harbor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field settlement_harbor", value)
			} else if value.Valid {
				h.settlement_harbor = new(int)
				*h.settlement_harbor = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySettlement queries the "settlement" edge of the Harbor entity.
func (h *Harbor) QuerySettlement() *SettlementQuery {
	return (&HarborClient{config: h.config}).QuerySettlement(h)
}

// Update returns a builder for updating this Harbor.
// Note that you need to call Harbor.Unwrap() before calling this method if this Harbor
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Harbor) Update() *HarborUpdateOne {
	return (&HarborClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Harbor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Harbor) Unwrap() *Harbor {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Harbor is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Harbor) String() string {
	var builder strings.Builder
	builder.WriteString("Harbor(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", x=")
	builder.WriteString(fmt.Sprintf("%v", h.X))
	builder.WriteString(", y=")
	builder.WriteString(fmt.Sprintf("%v", h.Y))
	builder.WriteString(", resource=")
	builder.WriteString(fmt.Sprintf("%v", h.Resource))
	builder.WriteByte(')')
	return builder.String()
}

// Harbors is a parsable slice of Harbor.
type Harbors []*Harbor

func (h Harbors) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
