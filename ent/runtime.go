// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/andrewmthomas87/catan/ent/numbertoken"
	"github.com/andrewmthomas87/catan/ent/player"
	"github.com/andrewmthomas87/catan/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	numbertokenFields := schema.NumberToken{}.Fields()
	_ = numbertokenFields
	// numbertokenDescValue is the schema descriptor for value field.
	numbertokenDescValue := numbertokenFields[0].Descriptor()
	// numbertoken.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	numbertoken.ValueValidator = func() func(int) error {
		validators := numbertokenDescValue.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(value int) error {
			for _, fn := range fns {
				if err := fn(value); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	playerFields := schema.Player{}.Fields()
	_ = playerFields
	// playerDescName is the schema descriptor for name field.
	playerDescName := playerFields[0].Descriptor()
	// player.NameValidator is a validator for the "name" field. It is called by the builders before save.
	player.NameValidator = func() func(string) error {
		validators := playerDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
