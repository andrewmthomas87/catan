// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/andrewmthomas87/catan/ent/migrate"

	"github.com/andrewmthomas87/catan/ent/harbor"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/numbertoken"
	"github.com/andrewmthomas87/catan/ent/player"
	"github.com/andrewmthomas87/catan/ent/road"
	"github.com/andrewmthomas87/catan/ent/robber"
	"github.com/andrewmthomas87/catan/ent/settlement"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Harbor is the client for interacting with the Harbor builders.
	Harbor *HarborClient
	// Hex is the client for interacting with the Hex builders.
	Hex *HexClient
	// NumberToken is the client for interacting with the NumberToken builders.
	NumberToken *NumberTokenClient
	// Player is the client for interacting with the Player builders.
	Player *PlayerClient
	// Road is the client for interacting with the Road builders.
	Road *RoadClient
	// Robber is the client for interacting with the Robber builders.
	Robber *RobberClient
	// Settlement is the client for interacting with the Settlement builders.
	Settlement *SettlementClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Harbor = NewHarborClient(c.config)
	c.Hex = NewHexClient(c.config)
	c.NumberToken = NewNumberTokenClient(c.config)
	c.Player = NewPlayerClient(c.config)
	c.Road = NewRoadClient(c.config)
	c.Robber = NewRobberClient(c.config)
	c.Settlement = NewSettlementClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Harbor:      NewHarborClient(cfg),
		Hex:         NewHexClient(cfg),
		NumberToken: NewNumberTokenClient(cfg),
		Player:      NewPlayerClient(cfg),
		Road:        NewRoadClient(cfg),
		Robber:      NewRobberClient(cfg),
		Settlement:  NewSettlementClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		Harbor:      NewHarborClient(cfg),
		Hex:         NewHexClient(cfg),
		NumberToken: NewNumberTokenClient(cfg),
		Player:      NewPlayerClient(cfg),
		Road:        NewRoadClient(cfg),
		Robber:      NewRobberClient(cfg),
		Settlement:  NewSettlementClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Harbor.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Harbor.Use(hooks...)
	c.Hex.Use(hooks...)
	c.NumberToken.Use(hooks...)
	c.Player.Use(hooks...)
	c.Road.Use(hooks...)
	c.Robber.Use(hooks...)
	c.Settlement.Use(hooks...)
}

// HarborClient is a client for the Harbor schema.
type HarborClient struct {
	config
}

// NewHarborClient returns a client for the Harbor from the given config.
func NewHarborClient(c config) *HarborClient {
	return &HarborClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `harbor.Hooks(f(g(h())))`.
func (c *HarborClient) Use(hooks ...Hook) {
	c.hooks.Harbor = append(c.hooks.Harbor, hooks...)
}

// Create returns a create builder for Harbor.
func (c *HarborClient) Create() *HarborCreate {
	mutation := newHarborMutation(c.config, OpCreate)
	return &HarborCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Harbor entities.
func (c *HarborClient) CreateBulk(builders ...*HarborCreate) *HarborCreateBulk {
	return &HarborCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Harbor.
func (c *HarborClient) Update() *HarborUpdate {
	mutation := newHarborMutation(c.config, OpUpdate)
	return &HarborUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HarborClient) UpdateOne(h *Harbor) *HarborUpdateOne {
	mutation := newHarborMutation(c.config, OpUpdateOne, withHarbor(h))
	return &HarborUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HarborClient) UpdateOneID(id int) *HarborUpdateOne {
	mutation := newHarborMutation(c.config, OpUpdateOne, withHarborID(id))
	return &HarborUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Harbor.
func (c *HarborClient) Delete() *HarborDelete {
	mutation := newHarborMutation(c.config, OpDelete)
	return &HarborDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HarborClient) DeleteOne(h *Harbor) *HarborDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HarborClient) DeleteOneID(id int) *HarborDeleteOne {
	builder := c.Delete().Where(harbor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HarborDeleteOne{builder}
}

// Query returns a query builder for Harbor.
func (c *HarborClient) Query() *HarborQuery {
	return &HarborQuery{config: c.config}
}

// Get returns a Harbor entity by its id.
func (c *HarborClient) Get(ctx context.Context, id int) (*Harbor, error) {
	return c.Query().Where(harbor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HarborClient) GetX(ctx context.Context, id int) *Harbor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySettlement queries the settlement edge of a Harbor.
func (c *HarborClient) QuerySettlement(h *Harbor) *SettlementQuery {
	query := &SettlementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(harbor.Table, harbor.FieldID, id),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, harbor.SettlementTable, harbor.SettlementColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HarborClient) Hooks() []Hook {
	return c.hooks.Harbor
}

// HexClient is a client for the Hex schema.
type HexClient struct {
	config
}

// NewHexClient returns a client for the Hex from the given config.
func NewHexClient(c config) *HexClient {
	return &HexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hex.Hooks(f(g(h())))`.
func (c *HexClient) Use(hooks ...Hook) {
	c.hooks.Hex = append(c.hooks.Hex, hooks...)
}

// Create returns a create builder for Hex.
func (c *HexClient) Create() *HexCreate {
	mutation := newHexMutation(c.config, OpCreate)
	return &HexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hex entities.
func (c *HexClient) CreateBulk(builders ...*HexCreate) *HexCreateBulk {
	return &HexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hex.
func (c *HexClient) Update() *HexUpdate {
	mutation := newHexMutation(c.config, OpUpdate)
	return &HexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HexClient) UpdateOne(h *Hex) *HexUpdateOne {
	mutation := newHexMutation(c.config, OpUpdateOne, withHex(h))
	return &HexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HexClient) UpdateOneID(id int) *HexUpdateOne {
	mutation := newHexMutation(c.config, OpUpdateOne, withHexID(id))
	return &HexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hex.
func (c *HexClient) Delete() *HexDelete {
	mutation := newHexMutation(c.config, OpDelete)
	return &HexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HexClient) DeleteOne(h *Hex) *HexDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HexClient) DeleteOneID(id int) *HexDeleteOne {
	builder := c.Delete().Where(hex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HexDeleteOne{builder}
}

// Query returns a query builder for Hex.
func (c *HexClient) Query() *HexQuery {
	return &HexQuery{config: c.config}
}

// Get returns a Hex entity by its id.
func (c *HexClient) Get(ctx context.Context, id int) (*Hex, error) {
	return c.Query().Where(hex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HexClient) GetX(ctx context.Context, id int) *Hex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNumberToken queries the number_token edge of a Hex.
func (c *HexClient) QueryNumberToken(h *Hex) *NumberTokenQuery {
	query := &NumberTokenQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hex.Table, hex.FieldID, id),
			sqlgraph.To(numbertoken.Table, numbertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hex.NumberTokenTable, hex.NumberTokenColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRobber queries the robber edge of a Hex.
func (c *HexClient) QueryRobber(h *Hex) *RobberQuery {
	query := &RobberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hex.Table, hex.FieldID, id),
			sqlgraph.To(robber.Table, robber.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hex.RobberTable, hex.RobberColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySettlements queries the settlements edge of a Hex.
func (c *HexClient) QuerySettlements(h *Hex) *SettlementQuery {
	query := &SettlementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hex.Table, hex.FieldID, id),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hex.SettlementsTable, hex.SettlementsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HexClient) Hooks() []Hook {
	return c.hooks.Hex
}

// NumberTokenClient is a client for the NumberToken schema.
type NumberTokenClient struct {
	config
}

// NewNumberTokenClient returns a client for the NumberToken from the given config.
func NewNumberTokenClient(c config) *NumberTokenClient {
	return &NumberTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `numbertoken.Hooks(f(g(h())))`.
func (c *NumberTokenClient) Use(hooks ...Hook) {
	c.hooks.NumberToken = append(c.hooks.NumberToken, hooks...)
}

// Create returns a create builder for NumberToken.
func (c *NumberTokenClient) Create() *NumberTokenCreate {
	mutation := newNumberTokenMutation(c.config, OpCreate)
	return &NumberTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NumberToken entities.
func (c *NumberTokenClient) CreateBulk(builders ...*NumberTokenCreate) *NumberTokenCreateBulk {
	return &NumberTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NumberToken.
func (c *NumberTokenClient) Update() *NumberTokenUpdate {
	mutation := newNumberTokenMutation(c.config, OpUpdate)
	return &NumberTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NumberTokenClient) UpdateOne(nt *NumberToken) *NumberTokenUpdateOne {
	mutation := newNumberTokenMutation(c.config, OpUpdateOne, withNumberToken(nt))
	return &NumberTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NumberTokenClient) UpdateOneID(id int) *NumberTokenUpdateOne {
	mutation := newNumberTokenMutation(c.config, OpUpdateOne, withNumberTokenID(id))
	return &NumberTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NumberToken.
func (c *NumberTokenClient) Delete() *NumberTokenDelete {
	mutation := newNumberTokenMutation(c.config, OpDelete)
	return &NumberTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NumberTokenClient) DeleteOne(nt *NumberToken) *NumberTokenDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NumberTokenClient) DeleteOneID(id int) *NumberTokenDeleteOne {
	builder := c.Delete().Where(numbertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NumberTokenDeleteOne{builder}
}

// Query returns a query builder for NumberToken.
func (c *NumberTokenClient) Query() *NumberTokenQuery {
	return &NumberTokenQuery{config: c.config}
}

// Get returns a NumberToken entity by its id.
func (c *NumberTokenClient) Get(ctx context.Context, id int) (*NumberToken, error) {
	return c.Query().Where(numbertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NumberTokenClient) GetX(ctx context.Context, id int) *NumberToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHex queries the hex edge of a NumberToken.
func (c *NumberTokenClient) QueryHex(nt *NumberToken) *HexQuery {
	query := &HexQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(numbertoken.Table, numbertoken.FieldID, id),
			sqlgraph.To(hex.Table, hex.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, numbertoken.HexTable, numbertoken.HexColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NumberTokenClient) Hooks() []Hook {
	return c.hooks.NumberToken
}

// PlayerClient is a client for the Player schema.
type PlayerClient struct {
	config
}

// NewPlayerClient returns a client for the Player from the given config.
func NewPlayerClient(c config) *PlayerClient {
	return &PlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `player.Hooks(f(g(h())))`.
func (c *PlayerClient) Use(hooks ...Hook) {
	c.hooks.Player = append(c.hooks.Player, hooks...)
}

// Create returns a create builder for Player.
func (c *PlayerClient) Create() *PlayerCreate {
	mutation := newPlayerMutation(c.config, OpCreate)
	return &PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Player entities.
func (c *PlayerClient) CreateBulk(builders ...*PlayerCreate) *PlayerCreateBulk {
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Player.
func (c *PlayerClient) Update() *PlayerUpdate {
	mutation := newPlayerMutation(c.config, OpUpdate)
	return &PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerClient) UpdateOne(pl *Player) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayer(pl))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerClient) UpdateOneID(id int) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayerID(id))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Player.
func (c *PlayerClient) Delete() *PlayerDelete {
	mutation := newPlayerMutation(c.config, OpDelete)
	return &PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlayerClient) DeleteOne(pl *Player) *PlayerDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlayerClient) DeleteOneID(id int) *PlayerDeleteOne {
	builder := c.Delete().Where(player.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerDeleteOne{builder}
}

// Query returns a query builder for Player.
func (c *PlayerClient) Query() *PlayerQuery {
	return &PlayerQuery{config: c.config}
}

// Get returns a Player entity by its id.
func (c *PlayerClient) Get(ctx context.Context, id int) (*Player, error) {
	return c.Query().Where(player.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerClient) GetX(ctx context.Context, id int) *Player {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PlayerClient) Hooks() []Hook {
	return c.hooks.Player
}

// RoadClient is a client for the Road schema.
type RoadClient struct {
	config
}

// NewRoadClient returns a client for the Road from the given config.
func NewRoadClient(c config) *RoadClient {
	return &RoadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `road.Hooks(f(g(h())))`.
func (c *RoadClient) Use(hooks ...Hook) {
	c.hooks.Road = append(c.hooks.Road, hooks...)
}

// Create returns a create builder for Road.
func (c *RoadClient) Create() *RoadCreate {
	mutation := newRoadMutation(c.config, OpCreate)
	return &RoadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Road entities.
func (c *RoadClient) CreateBulk(builders ...*RoadCreate) *RoadCreateBulk {
	return &RoadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Road.
func (c *RoadClient) Update() *RoadUpdate {
	mutation := newRoadMutation(c.config, OpUpdate)
	return &RoadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoadClient) UpdateOne(r *Road) *RoadUpdateOne {
	mutation := newRoadMutation(c.config, OpUpdateOne, withRoad(r))
	return &RoadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoadClient) UpdateOneID(id int) *RoadUpdateOne {
	mutation := newRoadMutation(c.config, OpUpdateOne, withRoadID(id))
	return &RoadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Road.
func (c *RoadClient) Delete() *RoadDelete {
	mutation := newRoadMutation(c.config, OpDelete)
	return &RoadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoadClient) DeleteOne(r *Road) *RoadDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoadClient) DeleteOneID(id int) *RoadDeleteOne {
	builder := c.Delete().Where(road.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoadDeleteOne{builder}
}

// Query returns a query builder for Road.
func (c *RoadClient) Query() *RoadQuery {
	return &RoadQuery{config: c.config}
}

// Get returns a Road entity by its id.
func (c *RoadClient) Get(ctx context.Context, id int) (*Road, error) {
	return c.Query().Where(road.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoadClient) GetX(ctx context.Context, id int) *Road {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoadClient) Hooks() []Hook {
	return c.hooks.Road
}

// RobberClient is a client for the Robber schema.
type RobberClient struct {
	config
}

// NewRobberClient returns a client for the Robber from the given config.
func NewRobberClient(c config) *RobberClient {
	return &RobberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `robber.Hooks(f(g(h())))`.
func (c *RobberClient) Use(hooks ...Hook) {
	c.hooks.Robber = append(c.hooks.Robber, hooks...)
}

// Create returns a create builder for Robber.
func (c *RobberClient) Create() *RobberCreate {
	mutation := newRobberMutation(c.config, OpCreate)
	return &RobberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Robber entities.
func (c *RobberClient) CreateBulk(builders ...*RobberCreate) *RobberCreateBulk {
	return &RobberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Robber.
func (c *RobberClient) Update() *RobberUpdate {
	mutation := newRobberMutation(c.config, OpUpdate)
	return &RobberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RobberClient) UpdateOne(r *Robber) *RobberUpdateOne {
	mutation := newRobberMutation(c.config, OpUpdateOne, withRobber(r))
	return &RobberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RobberClient) UpdateOneID(id int) *RobberUpdateOne {
	mutation := newRobberMutation(c.config, OpUpdateOne, withRobberID(id))
	return &RobberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Robber.
func (c *RobberClient) Delete() *RobberDelete {
	mutation := newRobberMutation(c.config, OpDelete)
	return &RobberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RobberClient) DeleteOne(r *Robber) *RobberDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RobberClient) DeleteOneID(id int) *RobberDeleteOne {
	builder := c.Delete().Where(robber.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RobberDeleteOne{builder}
}

// Query returns a query builder for Robber.
func (c *RobberClient) Query() *RobberQuery {
	return &RobberQuery{config: c.config}
}

// Get returns a Robber entity by its id.
func (c *RobberClient) Get(ctx context.Context, id int) (*Robber, error) {
	return c.Query().Where(robber.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RobberClient) GetX(ctx context.Context, id int) *Robber {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHex queries the hex edge of a Robber.
func (c *RobberClient) QueryHex(r *Robber) *HexQuery {
	query := &HexQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(robber.Table, robber.FieldID, id),
			sqlgraph.To(hex.Table, hex.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, robber.HexTable, robber.HexColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RobberClient) Hooks() []Hook {
	return c.hooks.Robber
}

// SettlementClient is a client for the Settlement schema.
type SettlementClient struct {
	config
}

// NewSettlementClient returns a client for the Settlement from the given config.
func NewSettlementClient(c config) *SettlementClient {
	return &SettlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `settlement.Hooks(f(g(h())))`.
func (c *SettlementClient) Use(hooks ...Hook) {
	c.hooks.Settlement = append(c.hooks.Settlement, hooks...)
}

// Create returns a create builder for Settlement.
func (c *SettlementClient) Create() *SettlementCreate {
	mutation := newSettlementMutation(c.config, OpCreate)
	return &SettlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Settlement entities.
func (c *SettlementClient) CreateBulk(builders ...*SettlementCreate) *SettlementCreateBulk {
	return &SettlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Settlement.
func (c *SettlementClient) Update() *SettlementUpdate {
	mutation := newSettlementMutation(c.config, OpUpdate)
	return &SettlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettlementClient) UpdateOne(s *Settlement) *SettlementUpdateOne {
	mutation := newSettlementMutation(c.config, OpUpdateOne, withSettlement(s))
	return &SettlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettlementClient) UpdateOneID(id int) *SettlementUpdateOne {
	mutation := newSettlementMutation(c.config, OpUpdateOne, withSettlementID(id))
	return &SettlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Settlement.
func (c *SettlementClient) Delete() *SettlementDelete {
	mutation := newSettlementMutation(c.config, OpDelete)
	return &SettlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettlementClient) DeleteOne(s *Settlement) *SettlementDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettlementClient) DeleteOneID(id int) *SettlementDeleteOne {
	builder := c.Delete().Where(settlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettlementDeleteOne{builder}
}

// Query returns a query builder for Settlement.
func (c *SettlementClient) Query() *SettlementQuery {
	return &SettlementQuery{config: c.config}
}

// Get returns a Settlement entity by its id.
func (c *SettlementClient) Get(ctx context.Context, id int) (*Settlement, error) {
	return c.Query().Where(settlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettlementClient) GetX(ctx context.Context, id int) *Settlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHexes queries the hexes edge of a Settlement.
func (c *SettlementClient) QueryHexes(s *Settlement) *HexQuery {
	query := &HexQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(settlement.Table, settlement.FieldID, id),
			sqlgraph.To(hex.Table, hex.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, settlement.HexesTable, settlement.HexesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHarbor queries the harbor edge of a Settlement.
func (c *SettlementClient) QueryHarbor(s *Settlement) *HarborQuery {
	query := &HarborQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(settlement.Table, settlement.FieldID, id),
			sqlgraph.To(harbor.Table, harbor.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, settlement.HarborTable, settlement.HarborColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SettlementClient) Hooks() []Hook {
	return c.hooks.Settlement
}
