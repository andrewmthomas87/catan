// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andrewmthomas87/catan/ent/harbor"
	"github.com/andrewmthomas87/catan/ent/predicate"
	"github.com/andrewmthomas87/catan/ent/settlement"
)

// HarborUpdate is the builder for updating Harbor entities.
type HarborUpdate struct {
	config
	hooks    []Hook
	mutation *HarborMutation
}

// Where adds a new predicate for the HarborUpdate builder.
func (hu *HarborUpdate) Where(ps ...predicate.Harbor) *HarborUpdate {
	hu.mutation.predicates = append(hu.mutation.predicates, ps...)
	return hu
}

// SetX sets the "x" field.
func (hu *HarborUpdate) SetX(i int) *HarborUpdate {
	hu.mutation.ResetX()
	hu.mutation.SetX(i)
	return hu
}

// AddX adds i to the "x" field.
func (hu *HarborUpdate) AddX(i int) *HarborUpdate {
	hu.mutation.AddX(i)
	return hu
}

// SetY sets the "y" field.
func (hu *HarborUpdate) SetY(i int) *HarborUpdate {
	hu.mutation.ResetY()
	hu.mutation.SetY(i)
	return hu
}

// AddY adds i to the "y" field.
func (hu *HarborUpdate) AddY(i int) *HarborUpdate {
	hu.mutation.AddY(i)
	return hu
}

// SetResource sets the "resource" field.
func (hu *HarborUpdate) SetResource(h harbor.Resource) *HarborUpdate {
	hu.mutation.SetResource(h)
	return hu
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (hu *HarborUpdate) SetSettlementID(id int) *HarborUpdate {
	hu.mutation.SetSettlementID(id)
	return hu
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (hu *HarborUpdate) SetNillableSettlementID(id *int) *HarborUpdate {
	if id != nil {
		hu = hu.SetSettlementID(*id)
	}
	return hu
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (hu *HarborUpdate) SetSettlement(s *Settlement) *HarborUpdate {
	return hu.SetSettlementID(s.ID)
}

// Mutation returns the HarborMutation object of the builder.
func (hu *HarborUpdate) Mutation() *HarborMutation {
	return hu.mutation
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (hu *HarborUpdate) ClearSettlement() *HarborUpdate {
	hu.mutation.ClearSettlement()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HarborUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HarborMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HarborUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HarborUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HarborUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HarborUpdate) check() error {
	if v, ok := hu.mutation.Resource(); ok {
		if err := harbor.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf("ent: validator failed for field \"resource\": %w", err)}
		}
	}
	return nil
}

func (hu *HarborUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   harbor.Table,
			Columns: harbor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: harbor.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldX,
		})
	}
	if value, ok := hu.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldX,
		})
	}
	if value, ok := hu.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldY,
		})
	}
	if value, ok := hu.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldY,
		})
	}
	if value, ok := hu.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: harbor.FieldResource,
		})
	}
	if hu.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   harbor.SettlementTable,
			Columns: []string{harbor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: settlement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   harbor.SettlementTable,
			Columns: []string{harbor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: settlement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{harbor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HarborUpdateOne is the builder for updating a single Harbor entity.
type HarborUpdateOne struct {
	config
	hooks    []Hook
	mutation *HarborMutation
}

// SetX sets the "x" field.
func (huo *HarborUpdateOne) SetX(i int) *HarborUpdateOne {
	huo.mutation.ResetX()
	huo.mutation.SetX(i)
	return huo
}

// AddX adds i to the "x" field.
func (huo *HarborUpdateOne) AddX(i int) *HarborUpdateOne {
	huo.mutation.AddX(i)
	return huo
}

// SetY sets the "y" field.
func (huo *HarborUpdateOne) SetY(i int) *HarborUpdateOne {
	huo.mutation.ResetY()
	huo.mutation.SetY(i)
	return huo
}

// AddY adds i to the "y" field.
func (huo *HarborUpdateOne) AddY(i int) *HarborUpdateOne {
	huo.mutation.AddY(i)
	return huo
}

// SetResource sets the "resource" field.
func (huo *HarborUpdateOne) SetResource(h harbor.Resource) *HarborUpdateOne {
	huo.mutation.SetResource(h)
	return huo
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (huo *HarborUpdateOne) SetSettlementID(id int) *HarborUpdateOne {
	huo.mutation.SetSettlementID(id)
	return huo
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (huo *HarborUpdateOne) SetNillableSettlementID(id *int) *HarborUpdateOne {
	if id != nil {
		huo = huo.SetSettlementID(*id)
	}
	return huo
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (huo *HarborUpdateOne) SetSettlement(s *Settlement) *HarborUpdateOne {
	return huo.SetSettlementID(s.ID)
}

// Mutation returns the HarborMutation object of the builder.
func (huo *HarborUpdateOne) Mutation() *HarborMutation {
	return huo.mutation
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (huo *HarborUpdateOne) ClearSettlement() *HarborUpdateOne {
	huo.mutation.ClearSettlement()
	return huo
}

// Save executes the query and returns the updated Harbor entity.
func (huo *HarborUpdateOne) Save(ctx context.Context) (*Harbor, error) {
	var (
		err  error
		node *Harbor
	)
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HarborMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HarborUpdateOne) SaveX(ctx context.Context) *Harbor {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HarborUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HarborUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HarborUpdateOne) check() error {
	if v, ok := huo.mutation.Resource(); ok {
		if err := harbor.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf("ent: validator failed for field \"resource\": %w", err)}
		}
	}
	return nil
}

func (huo *HarborUpdateOne) sqlSave(ctx context.Context) (_node *Harbor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   harbor.Table,
			Columns: harbor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: harbor.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Harbor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldX,
		})
	}
	if value, ok := huo.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldX,
		})
	}
	if value, ok := huo.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldY,
		})
	}
	if value, ok := huo.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: harbor.FieldY,
		})
	}
	if value, ok := huo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: harbor.FieldResource,
		})
	}
	if huo.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   harbor.SettlementTable,
			Columns: []string{harbor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: settlement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   harbor.SettlementTable,
			Columns: []string{harbor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: settlement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Harbor{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{harbor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
