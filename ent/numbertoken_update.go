// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/numbertoken"
	"github.com/andrewmthomas87/catan/ent/predicate"
)

// NumberTokenUpdate is the builder for updating NumberToken entities.
type NumberTokenUpdate struct {
	config
	hooks    []Hook
	mutation *NumberTokenMutation
}

// Where adds a new predicate for the NumberTokenUpdate builder.
func (ntu *NumberTokenUpdate) Where(ps ...predicate.NumberToken) *NumberTokenUpdate {
	ntu.mutation.predicates = append(ntu.mutation.predicates, ps...)
	return ntu
}

// SetValue sets the "value" field.
func (ntu *NumberTokenUpdate) SetValue(i int) *NumberTokenUpdate {
	ntu.mutation.ResetValue()
	ntu.mutation.SetValue(i)
	return ntu
}

// AddValue adds i to the "value" field.
func (ntu *NumberTokenUpdate) AddValue(i int) *NumberTokenUpdate {
	ntu.mutation.AddValue(i)
	return ntu
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (ntu *NumberTokenUpdate) SetHexID(id int) *NumberTokenUpdate {
	ntu.mutation.SetHexID(id)
	return ntu
}

// SetNillableHexID sets the "hex" edge to the Hex entity by ID if the given value is not nil.
func (ntu *NumberTokenUpdate) SetNillableHexID(id *int) *NumberTokenUpdate {
	if id != nil {
		ntu = ntu.SetHexID(*id)
	}
	return ntu
}

// SetHex sets the "hex" edge to the Hex entity.
func (ntu *NumberTokenUpdate) SetHex(h *Hex) *NumberTokenUpdate {
	return ntu.SetHexID(h.ID)
}

// Mutation returns the NumberTokenMutation object of the builder.
func (ntu *NumberTokenUpdate) Mutation() *NumberTokenMutation {
	return ntu.mutation
}

// ClearHex clears the "hex" edge to the Hex entity.
func (ntu *NumberTokenUpdate) ClearHex() *NumberTokenUpdate {
	ntu.mutation.ClearHex()
	return ntu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NumberTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ntu.hooks) == 0 {
		if err = ntu.check(); err != nil {
			return 0, err
		}
		affected, err = ntu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumberTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntu.check(); err != nil {
				return 0, err
			}
			ntu.mutation = mutation
			affected, err = ntu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntu.hooks) - 1; i >= 0; i-- {
			mut = ntu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NumberTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NumberTokenUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NumberTokenUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntu *NumberTokenUpdate) check() error {
	if v, ok := ntu.mutation.Value(); ok {
		if err := numbertoken.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	return nil
}

func (ntu *NumberTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numbertoken.Table,
			Columns: numbertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: numbertoken.FieldID,
			},
		},
	}
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: numbertoken.FieldValue,
		})
	}
	if value, ok := ntu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: numbertoken.FieldValue,
		})
	}
	if ntu.mutation.HexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   numbertoken.HexTable,
			Columns: []string{numbertoken.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   numbertoken.HexTable,
			Columns: []string{numbertoken.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{numbertoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NumberTokenUpdateOne is the builder for updating a single NumberToken entity.
type NumberTokenUpdateOne struct {
	config
	hooks    []Hook
	mutation *NumberTokenMutation
}

// SetValue sets the "value" field.
func (ntuo *NumberTokenUpdateOne) SetValue(i int) *NumberTokenUpdateOne {
	ntuo.mutation.ResetValue()
	ntuo.mutation.SetValue(i)
	return ntuo
}

// AddValue adds i to the "value" field.
func (ntuo *NumberTokenUpdateOne) AddValue(i int) *NumberTokenUpdateOne {
	ntuo.mutation.AddValue(i)
	return ntuo
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (ntuo *NumberTokenUpdateOne) SetHexID(id int) *NumberTokenUpdateOne {
	ntuo.mutation.SetHexID(id)
	return ntuo
}

// SetNillableHexID sets the "hex" edge to the Hex entity by ID if the given value is not nil.
func (ntuo *NumberTokenUpdateOne) SetNillableHexID(id *int) *NumberTokenUpdateOne {
	if id != nil {
		ntuo = ntuo.SetHexID(*id)
	}
	return ntuo
}

// SetHex sets the "hex" edge to the Hex entity.
func (ntuo *NumberTokenUpdateOne) SetHex(h *Hex) *NumberTokenUpdateOne {
	return ntuo.SetHexID(h.ID)
}

// Mutation returns the NumberTokenMutation object of the builder.
func (ntuo *NumberTokenUpdateOne) Mutation() *NumberTokenMutation {
	return ntuo.mutation
}

// ClearHex clears the "hex" edge to the Hex entity.
func (ntuo *NumberTokenUpdateOne) ClearHex() *NumberTokenUpdateOne {
	ntuo.mutation.ClearHex()
	return ntuo
}

// Save executes the query and returns the updated NumberToken entity.
func (ntuo *NumberTokenUpdateOne) Save(ctx context.Context) (*NumberToken, error) {
	var (
		err  error
		node *NumberToken
	)
	if len(ntuo.hooks) == 0 {
		if err = ntuo.check(); err != nil {
			return nil, err
		}
		node, err = ntuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumberTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntuo.check(); err != nil {
				return nil, err
			}
			ntuo.mutation = mutation
			node, err = ntuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntuo.hooks) - 1; i >= 0; i-- {
			mut = ntuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NumberTokenUpdateOne) SaveX(ctx context.Context) *NumberToken {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NumberTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NumberTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntuo *NumberTokenUpdateOne) check() error {
	if v, ok := ntuo.mutation.Value(); ok {
		if err := numbertoken.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	return nil
}

func (ntuo *NumberTokenUpdateOne) sqlSave(ctx context.Context) (_node *NumberToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numbertoken.Table,
			Columns: numbertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: numbertoken.FieldID,
			},
		},
	}
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NumberToken.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ntuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: numbertoken.FieldValue,
		})
	}
	if value, ok := ntuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: numbertoken.FieldValue,
		})
	}
	if ntuo.mutation.HexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   numbertoken.HexTable,
			Columns: []string{numbertoken.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   numbertoken.HexTable,
			Columns: []string{numbertoken.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NumberToken{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{numbertoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
