// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/numbertoken"
)

// NumberToken is the model entity for the NumberToken schema.
type NumberToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value int `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NumberTokenQuery when eager-loading is set.
	Edges NumberTokenEdges `json:"edges"`
}

// NumberTokenEdges holds the relations/edges for other nodes in the graph.
type NumberTokenEdges struct {
	// Hex holds the value of the hex edge.
	Hex *Hex `json:"hex,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HexOrErr returns the Hex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NumberTokenEdges) HexOrErr() (*Hex, error) {
	if e.loadedTypes[0] {
		if e.Hex == nil {
			// The edge hex was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hex.Label}
		}
		return e.Hex, nil
	}
	return nil, &NotLoadedError{edge: "hex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NumberToken) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case numbertoken.FieldID, numbertoken.FieldValue:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type NumberToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NumberToken fields.
func (nt *NumberToken) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case numbertoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = int(value.Int64)
		case numbertoken.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				nt.Value = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryHex queries the "hex" edge of the NumberToken entity.
func (nt *NumberToken) QueryHex() *HexQuery {
	return (&NumberTokenClient{config: nt.config}).QueryHex(nt)
}

// Update returns a builder for updating this NumberToken.
// Note that you need to call NumberToken.Unwrap() before calling this method if this NumberToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NumberToken) Update() *NumberTokenUpdateOne {
	return (&NumberTokenClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the NumberToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NumberToken) Unwrap() *NumberToken {
	tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NumberToken is not a transactional entity")
	}
	nt.config.driver = tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NumberToken) String() string {
	var builder strings.Builder
	builder.WriteString("NumberToken(")
	builder.WriteString(fmt.Sprintf("id=%v", nt.ID))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", nt.Value))
	builder.WriteByte(')')
	return builder.String()
}

// NumberTokens is a parsable slice of NumberToken.
type NumberTokens []*NumberToken

func (nt NumberTokens) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
