// Code generated by entc, DO NOT EDIT.

package hex

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/andrewmthomas87/catan/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// X applies equality check predicate on the "x" field. It's identical to XEQ.
func X(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldX), v))
	})
}

// Y applies equality check predicate on the "y" field. It's identical to YEQ.
func Y(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldY), v))
	})
}

// XEQ applies the EQ predicate on the "x" field.
func XEQ(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldX), v))
	})
}

// XNEQ applies the NEQ predicate on the "x" field.
func XNEQ(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldX), v))
	})
}

// XIn applies the In predicate on the "x" field.
func XIn(vs ...int) predicate.Hex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldX), v...))
	})
}

// XNotIn applies the NotIn predicate on the "x" field.
func XNotIn(vs ...int) predicate.Hex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldX), v...))
	})
}

// XGT applies the GT predicate on the "x" field.
func XGT(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldX), v))
	})
}

// XGTE applies the GTE predicate on the "x" field.
func XGTE(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldX), v))
	})
}

// XLT applies the LT predicate on the "x" field.
func XLT(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldX), v))
	})
}

// XLTE applies the LTE predicate on the "x" field.
func XLTE(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldX), v))
	})
}

// YEQ applies the EQ predicate on the "y" field.
func YEQ(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldY), v))
	})
}

// YNEQ applies the NEQ predicate on the "y" field.
func YNEQ(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldY), v))
	})
}

// YIn applies the In predicate on the "y" field.
func YIn(vs ...int) predicate.Hex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldY), v...))
	})
}

// YNotIn applies the NotIn predicate on the "y" field.
func YNotIn(vs ...int) predicate.Hex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldY), v...))
	})
}

// YGT applies the GT predicate on the "y" field.
func YGT(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldY), v))
	})
}

// YGTE applies the GTE predicate on the "y" field.
func YGTE(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldY), v))
	})
}

// YLT applies the LT predicate on the "y" field.
func YLT(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldY), v))
	})
}

// YLTE applies the LTE predicate on the "y" field.
func YLTE(v int) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldY), v))
	})
}

// TerrainEQ applies the EQ predicate on the "terrain" field.
func TerrainEQ(v Terrain) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerrain), v))
	})
}

// TerrainNEQ applies the NEQ predicate on the "terrain" field.
func TerrainNEQ(v Terrain) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTerrain), v))
	})
}

// TerrainIn applies the In predicate on the "terrain" field.
func TerrainIn(vs ...Terrain) predicate.Hex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTerrain), v...))
	})
}

// TerrainNotIn applies the NotIn predicate on the "terrain" field.
func TerrainNotIn(vs ...Terrain) predicate.Hex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Hex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTerrain), v...))
	})
}

// HasNumberToken applies the HasEdge predicate on the "number_token" edge.
func HasNumberToken() predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NumberTokenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, NumberTokenTable, NumberTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNumberTokenWith applies the HasEdge predicate on the "number_token" edge with a given conditions (other predicates).
func HasNumberTokenWith(preds ...predicate.NumberToken) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NumberTokenInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, NumberTokenTable, NumberTokenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRobber applies the HasEdge predicate on the "robber" edge.
func HasRobber() predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RobberTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RobberTable, RobberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRobberWith applies the HasEdge predicate on the "robber" edge with a given conditions (other predicates).
func HasRobberWith(preds ...predicate.Robber) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RobberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RobberTable, RobberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSettlements applies the HasEdge predicate on the "settlements" edge.
func HasSettlements() predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SettlementsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SettlementsTable, SettlementsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSettlementsWith applies the HasEdge predicate on the "settlements" edge with a given conditions (other predicates).
func HasSettlementsWith(preds ...predicate.Settlement) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SettlementsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SettlementsTable, SettlementsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hex) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hex) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hex) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		p(s.Not())
	})
}
