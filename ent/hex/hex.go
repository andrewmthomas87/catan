// Code generated by entc, DO NOT EDIT.

package hex

import (
	"fmt"
)

const (
	// Label holds the string label denoting the hex type in the database.
	Label = "hex"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldX holds the string denoting the x field in the database.
	FieldX = "x"
	// FieldY holds the string denoting the y field in the database.
	FieldY = "y"
	// FieldTerrain holds the string denoting the terrain field in the database.
	FieldTerrain = "terrain"

	// EdgeNumberToken holds the string denoting the number_token edge name in mutations.
	EdgeNumberToken = "number_token"
	// EdgeRobber holds the string denoting the robber edge name in mutations.
	EdgeRobber = "robber"
	// EdgeSettlements holds the string denoting the settlements edge name in mutations.
	EdgeSettlements = "settlements"

	// Table holds the table name of the hex in the database.
	Table = "hexes"
	// NumberTokenTable is the table the holds the number_token relation/edge.
	NumberTokenTable = "hexes"
	// NumberTokenInverseTable is the table name for the NumberToken entity.
	// It exists in this package in order to avoid circular dependency with the "numbertoken" package.
	NumberTokenInverseTable = "number_tokens"
	// NumberTokenColumn is the table column denoting the number_token relation/edge.
	NumberTokenColumn = "number_token_hex"
	// RobberTable is the table the holds the robber relation/edge.
	RobberTable = "hexes"
	// RobberInverseTable is the table name for the Robber entity.
	// It exists in this package in order to avoid circular dependency with the "robber" package.
	RobberInverseTable = "robbers"
	// RobberColumn is the table column denoting the robber relation/edge.
	RobberColumn = "robber_hex"
	// SettlementsTable is the table the holds the settlements relation/edge. The primary key declared below.
	SettlementsTable = "settlement_hexes"
	// SettlementsInverseTable is the table name for the Settlement entity.
	// It exists in this package in order to avoid circular dependency with the "settlement" package.
	SettlementsInverseTable = "settlements"
)

// Columns holds all SQL columns for hex fields.
var Columns = []string{
	FieldID,
	FieldX,
	FieldY,
	FieldTerrain,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Hex type.
var ForeignKeys = []string{
	"number_token_hex",
	"robber_hex",
}

var (
	// SettlementsPrimaryKey and SettlementsColumn2 are the table columns denoting the
	// primary key for the settlements relation (M2M).
	SettlementsPrimaryKey = []string{"settlement_id", "hex_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Terrain defines the type for the "terrain" enum field.
type Terrain string

// Terrain values.
const (
	TerrainHills     Terrain = "hills"
	TerrainForest    Terrain = "forest"
	TerrainMountains Terrain = "mountains"
	TerrainFields    Terrain = "fields"
	TerrainPasture   Terrain = "pasture"
	TerrainDesert    Terrain = "desert"
)

func (t Terrain) String() string {
	return string(t)
}

// TerrainValidator is a validator for the "terrain" field enum values. It is called by the builders before save.
func TerrainValidator(t Terrain) error {
	switch t {
	case TerrainHills, TerrainForest, TerrainMountains, TerrainFields, TerrainPasture, TerrainDesert:
		return nil
	default:
		return fmt.Errorf("hex: invalid enum value for terrain field: %q", t)
	}
}
