// Code generated by entc, DO NOT EDIT.

package harbor

import (
	"fmt"
)

const (
	// Label holds the string label denoting the harbor type in the database.
	Label = "harbor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldX holds the string denoting the x field in the database.
	FieldX = "x"
	// FieldY holds the string denoting the y field in the database.
	FieldY = "y"
	// FieldResource holds the string denoting the resource field in the database.
	FieldResource = "resource"

	// EdgeSettlement holds the string denoting the settlement edge name in mutations.
	EdgeSettlement = "settlement"

	// Table holds the table name of the harbor in the database.
	Table = "harbors"
	// SettlementTable is the table the holds the settlement relation/edge.
	SettlementTable = "harbors"
	// SettlementInverseTable is the table name for the Settlement entity.
	// It exists in this package in order to avoid circular dependency with the "settlement" package.
	SettlementInverseTable = "settlements"
	// SettlementColumn is the table column denoting the settlement relation/edge.
	SettlementColumn = "settlement_harbor"
)

// Columns holds all SQL columns for harbor fields.
var Columns = []string{
	FieldID,
	FieldX,
	FieldY,
	FieldResource,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Harbor type.
var ForeignKeys = []string{
	"settlement_harbor",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Resource defines the type for the "resource" enum field.
type Resource string

// Resource values.
const (
	ResourceGeneric Resource = "generic"
	ResourceBrick   Resource = "brick"
	ResourceLumber  Resource = "lumber"
	ResourceOre     Resource = "ore"
	ResourceGrain   Resource = "grain"
	ResourceWool    Resource = "wool"
)

func (r Resource) String() string {
	return string(r)
}

// ResourceValidator is a validator for the "resource" field enum values. It is called by the builders before save.
func ResourceValidator(r Resource) error {
	switch r {
	case ResourceGeneric, ResourceBrick, ResourceLumber, ResourceOre, ResourceGrain, ResourceWool:
		return nil
	default:
		return fmt.Errorf("harbor: invalid enum value for resource field: %q", r)
	}
}
