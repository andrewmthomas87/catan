// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/andrewmthomas87/catan/ent/road"
)

// Road is the model entity for the Road schema.
type Road struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// X holds the value of the "x" field.
	X int `json:"x,omitempty"`
	// Y holds the value of the "y" field.
	Y int `json:"y,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Road) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case road.FieldID, road.FieldX, road.FieldY:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Road", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Road fields.
func (r *Road) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case road.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case road.FieldX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				r.X = int(value.Int64)
			}
		case road.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				r.Y = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Road.
// Note that you need to call Road.Unwrap() before calling this method if this Road
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Road) Update() *RoadUpdateOne {
	return (&RoadClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Road entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Road) Unwrap() *Road {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Road is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Road) String() string {
	var builder strings.Builder
	builder.WriteString("Road(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", x=")
	builder.WriteString(fmt.Sprintf("%v", r.X))
	builder.WriteString(", y=")
	builder.WriteString(fmt.Sprintf("%v", r.Y))
	builder.WriteByte(')')
	return builder.String()
}

// Roads is a parsable slice of Road.
type Roads []*Road

func (r Roads) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
