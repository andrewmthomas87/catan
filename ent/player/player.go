// Code generated by entc, DO NOT EDIT.

package player

import (
	"fmt"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"

	// Table holds the table name of the player in the database.
	Table = "players"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldColor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Color defines the type for the "color" enum field.
type Color string

// Color values.
const (
	ColorBlue   Color = "blue"
	ColorOrange Color = "orange"
	ColorRed    Color = "red"
	ColorWhite  Color = "white"
)

func (c Color) String() string {
	return string(c)
}

// ColorValidator is a validator for the "color" field enum values. It is called by the builders before save.
func ColorValidator(c Color) error {
	switch c {
	case ColorBlue, ColorOrange, ColorRed, ColorWhite:
		return nil
	default:
		return fmt.Errorf("player: invalid enum value for color field: %q", c)
	}
}
