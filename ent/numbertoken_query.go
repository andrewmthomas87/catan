// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/numbertoken"
	"github.com/andrewmthomas87/catan/ent/predicate"
)

// NumberTokenQuery is the builder for querying NumberToken entities.
type NumberTokenQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.NumberToken
	// eager-loading edges.
	withHex *HexQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NumberTokenQuery builder.
func (ntq *NumberTokenQuery) Where(ps ...predicate.NumberToken) *NumberTokenQuery {
	ntq.predicates = append(ntq.predicates, ps...)
	return ntq
}

// Limit adds a limit step to the query.
func (ntq *NumberTokenQuery) Limit(limit int) *NumberTokenQuery {
	ntq.limit = &limit
	return ntq
}

// Offset adds an offset step to the query.
func (ntq *NumberTokenQuery) Offset(offset int) *NumberTokenQuery {
	ntq.offset = &offset
	return ntq
}

// Order adds an order step to the query.
func (ntq *NumberTokenQuery) Order(o ...OrderFunc) *NumberTokenQuery {
	ntq.order = append(ntq.order, o...)
	return ntq
}

// QueryHex chains the current query on the "hex" edge.
func (ntq *NumberTokenQuery) QueryHex() *HexQuery {
	query := &HexQuery{config: ntq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ntq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ntq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(numbertoken.Table, numbertoken.FieldID, selector),
			sqlgraph.To(hex.Table, hex.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, numbertoken.HexTable, numbertoken.HexColumn),
		)
		fromU = sqlgraph.SetNeighbors(ntq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NumberToken entity from the query.
// Returns a *NotFoundError when no NumberToken was found.
func (ntq *NumberTokenQuery) First(ctx context.Context) (*NumberToken, error) {
	nodes, err := ntq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{numbertoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ntq *NumberTokenQuery) FirstX(ctx context.Context) *NumberToken {
	node, err := ntq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NumberToken ID from the query.
// Returns a *NotFoundError when no NumberToken ID was found.
func (ntq *NumberTokenQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ntq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{numbertoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ntq *NumberTokenQuery) FirstIDX(ctx context.Context) int {
	id, err := ntq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NumberToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one NumberToken entity is not found.
// Returns a *NotFoundError when no NumberToken entities are found.
func (ntq *NumberTokenQuery) Only(ctx context.Context) (*NumberToken, error) {
	nodes, err := ntq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{numbertoken.Label}
	default:
		return nil, &NotSingularError{numbertoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ntq *NumberTokenQuery) OnlyX(ctx context.Context) *NumberToken {
	node, err := ntq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NumberToken ID in the query.
// Returns a *NotSingularError when exactly one NumberToken ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ntq *NumberTokenQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ntq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = &NotSingularError{numbertoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ntq *NumberTokenQuery) OnlyIDX(ctx context.Context) int {
	id, err := ntq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NumberTokens.
func (ntq *NumberTokenQuery) All(ctx context.Context) ([]*NumberToken, error) {
	if err := ntq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ntq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ntq *NumberTokenQuery) AllX(ctx context.Context) []*NumberToken {
	nodes, err := ntq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NumberToken IDs.
func (ntq *NumberTokenQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ntq.Select(numbertoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ntq *NumberTokenQuery) IDsX(ctx context.Context) []int {
	ids, err := ntq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ntq *NumberTokenQuery) Count(ctx context.Context) (int, error) {
	if err := ntq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ntq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ntq *NumberTokenQuery) CountX(ctx context.Context) int {
	count, err := ntq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ntq *NumberTokenQuery) Exist(ctx context.Context) (bool, error) {
	if err := ntq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ntq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ntq *NumberTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := ntq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NumberTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ntq *NumberTokenQuery) Clone() *NumberTokenQuery {
	if ntq == nil {
		return nil
	}
	return &NumberTokenQuery{
		config:     ntq.config,
		limit:      ntq.limit,
		offset:     ntq.offset,
		order:      append([]OrderFunc{}, ntq.order...),
		predicates: append([]predicate.NumberToken{}, ntq.predicates...),
		withHex:    ntq.withHex.Clone(),
		// clone intermediate query.
		sql:  ntq.sql.Clone(),
		path: ntq.path,
	}
}

// WithHex tells the query-builder to eager-load the nodes that are connected to
// the "hex" edge. The optional arguments are used to configure the query builder of the edge.
func (ntq *NumberTokenQuery) WithHex(opts ...func(*HexQuery)) *NumberTokenQuery {
	query := &HexQuery{config: ntq.config}
	for _, opt := range opts {
		opt(query)
	}
	ntq.withHex = query
	return ntq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value int `json:"value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NumberToken.Query().
//		GroupBy(numbertoken.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ntq *NumberTokenQuery) GroupBy(field string, fields ...string) *NumberTokenGroupBy {
	group := &NumberTokenGroupBy{config: ntq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ntq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ntq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value int `json:"value,omitempty"`
//	}
//
//	client.NumberToken.Query().
//		Select(numbertoken.FieldValue).
//		Scan(ctx, &v)
//
func (ntq *NumberTokenQuery) Select(field string, fields ...string) *NumberTokenSelect {
	ntq.fields = append([]string{field}, fields...)
	return &NumberTokenSelect{NumberTokenQuery: ntq}
}

func (ntq *NumberTokenQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ntq.fields {
		if !numbertoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ntq.path != nil {
		prev, err := ntq.path(ctx)
		if err != nil {
			return err
		}
		ntq.sql = prev
	}
	return nil
}

func (ntq *NumberTokenQuery) sqlAll(ctx context.Context) ([]*NumberToken, error) {
	var (
		nodes       = []*NumberToken{}
		_spec       = ntq.querySpec()
		loadedTypes = [1]bool{
			ntq.withHex != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &NumberToken{config: ntq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ntq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ntq.withHex; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*NumberToken)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Hex(func(s *sql.Selector) {
			s.Where(sql.InValues(numbertoken.HexColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.number_token_hex
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "number_token_hex" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "number_token_hex" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Hex = n
		}
	}

	return nodes, nil
}

func (ntq *NumberTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ntq.querySpec()
	return sqlgraph.CountNodes(ctx, ntq.driver, _spec)
}

func (ntq *NumberTokenQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ntq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ntq *NumberTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numbertoken.Table,
			Columns: numbertoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: numbertoken.FieldID,
			},
		},
		From:   ntq.sql,
		Unique: true,
	}
	if fields := ntq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, numbertoken.FieldID)
		for i := range fields {
			if fields[i] != numbertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ntq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ntq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ntq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ntq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, numbertoken.ValidColumn)
			}
		}
	}
	return _spec
}

func (ntq *NumberTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ntq.driver.Dialect())
	t1 := builder.Table(numbertoken.Table)
	selector := builder.Select(t1.Columns(numbertoken.Columns...)...).From(t1)
	if ntq.sql != nil {
		selector = ntq.sql
		selector.Select(selector.Columns(numbertoken.Columns...)...)
	}
	for _, p := range ntq.predicates {
		p(selector)
	}
	for _, p := range ntq.order {
		p(selector, numbertoken.ValidColumn)
	}
	if offset := ntq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ntq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NumberTokenGroupBy is the group-by builder for NumberToken entities.
type NumberTokenGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ntgb *NumberTokenGroupBy) Aggregate(fns ...AggregateFunc) *NumberTokenGroupBy {
	ntgb.fns = append(ntgb.fns, fns...)
	return ntgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ntgb *NumberTokenGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ntgb.path(ctx)
	if err != nil {
		return err
	}
	ntgb.sql = query
	return ntgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ntgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ntgb.fields) > 1 {
		return nil, errors.New("ent: NumberTokenGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ntgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) StringsX(ctx context.Context) []string {
	v, err := ntgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ntgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) StringX(ctx context.Context) string {
	v, err := ntgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ntgb.fields) > 1 {
		return nil, errors.New("ent: NumberTokenGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ntgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) IntsX(ctx context.Context) []int {
	v, err := ntgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ntgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) IntX(ctx context.Context) int {
	v, err := ntgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ntgb.fields) > 1 {
		return nil, errors.New("ent: NumberTokenGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ntgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ntgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ntgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ntgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ntgb.fields) > 1 {
		return nil, errors.New("ent: NumberTokenGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ntgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ntgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ntgb *NumberTokenGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ntgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ntgb *NumberTokenGroupBy) BoolX(ctx context.Context) bool {
	v, err := ntgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ntgb *NumberTokenGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ntgb.fields {
		if !numbertoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ntgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ntgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ntgb *NumberTokenGroupBy) sqlQuery() *sql.Selector {
	selector := ntgb.sql
	columns := make([]string, 0, len(ntgb.fields)+len(ntgb.fns))
	columns = append(columns, ntgb.fields...)
	for _, fn := range ntgb.fns {
		columns = append(columns, fn(selector, numbertoken.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ntgb.fields...)
}

// NumberTokenSelect is the builder for selecting fields of NumberToken entities.
type NumberTokenSelect struct {
	*NumberTokenQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (nts *NumberTokenSelect) Scan(ctx context.Context, v interface{}) error {
	if err := nts.prepareQuery(ctx); err != nil {
		return err
	}
	nts.sql = nts.NumberTokenQuery.sqlQuery(ctx)
	return nts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nts *NumberTokenSelect) ScanX(ctx context.Context, v interface{}) {
	if err := nts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Strings(ctx context.Context) ([]string, error) {
	if len(nts.fields) > 1 {
		return nil, errors.New("ent: NumberTokenSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := nts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nts *NumberTokenSelect) StringsX(ctx context.Context) []string {
	v, err := nts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nts *NumberTokenSelect) StringX(ctx context.Context) string {
	v, err := nts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Ints(ctx context.Context) ([]int, error) {
	if len(nts.fields) > 1 {
		return nil, errors.New("ent: NumberTokenSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := nts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nts *NumberTokenSelect) IntsX(ctx context.Context) []int {
	v, err := nts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nts *NumberTokenSelect) IntX(ctx context.Context) int {
	v, err := nts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(nts.fields) > 1 {
		return nil, errors.New("ent: NumberTokenSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := nts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nts *NumberTokenSelect) Float64sX(ctx context.Context) []float64 {
	v, err := nts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nts *NumberTokenSelect) Float64X(ctx context.Context) float64 {
	v, err := nts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(nts.fields) > 1 {
		return nil, errors.New("ent: NumberTokenSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := nts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nts *NumberTokenSelect) BoolsX(ctx context.Context) []bool {
	v, err := nts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (nts *NumberTokenSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{numbertoken.Label}
	default:
		err = fmt.Errorf("ent: NumberTokenSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nts *NumberTokenSelect) BoolX(ctx context.Context) bool {
	v, err := nts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nts *NumberTokenSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := nts.sqlQuery().Query()
	if err := nts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nts *NumberTokenSelect) sqlQuery() sql.Querier {
	selector := nts.sql
	selector.Select(selector.Columns(nts.fields...)...)
	return selector
}
