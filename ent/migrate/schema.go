// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// HarborsColumns holds the columns for the "harbors" table.
	HarborsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "x", Type: field.TypeInt},
		{Name: "y", Type: field.TypeInt},
		{Name: "resource", Type: field.TypeEnum, Enums: []string{"generic", "brick", "lumber", "ore", "grain", "wool"}},
		{Name: "settlement_harbor", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// HarborsTable holds the schema information for the "harbors" table.
	HarborsTable = &schema.Table{
		Name:       "harbors",
		Columns:    HarborsColumns,
		PrimaryKey: []*schema.Column{HarborsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "harbors_settlements_harbor",
				Columns: []*schema.Column{HarborsColumns[4]},

				RefColumns: []*schema.Column{SettlementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HexesColumns holds the columns for the "hexes" table.
	HexesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "x", Type: field.TypeInt},
		{Name: "y", Type: field.TypeInt},
		{Name: "terrain", Type: field.TypeEnum, Enums: []string{"hills", "forest", "mountains", "fields", "pasture", "desert"}},
		{Name: "number_token_hex", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "robber_hex", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// HexesTable holds the schema information for the "hexes" table.
	HexesTable = &schema.Table{
		Name:       "hexes",
		Columns:    HexesColumns,
		PrimaryKey: []*schema.Column{HexesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "hexes_number_tokens_hex",
				Columns: []*schema.Column{HexesColumns[4]},

				RefColumns: []*schema.Column{NumberTokensColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "hexes_robbers_hex",
				Columns: []*schema.Column{HexesColumns[5]},

				RefColumns: []*schema.Column{RobbersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NumberTokensColumns holds the columns for the "number_tokens" table.
	NumberTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeInt},
	}
	// NumberTokensTable holds the schema information for the "number_tokens" table.
	NumberTokensTable = &schema.Table{
		Name:        "number_tokens",
		Columns:     NumberTokensColumns,
		PrimaryKey:  []*schema.Column{NumberTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PlayersColumns holds the columns for the "players" table.
	PlayersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 16},
		{Name: "color", Type: field.TypeEnum, Enums: []string{"blue", "orange", "red", "white"}},
	}
	// PlayersTable holds the schema information for the "players" table.
	PlayersTable = &schema.Table{
		Name:        "players",
		Columns:     PlayersColumns,
		PrimaryKey:  []*schema.Column{PlayersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// RoadsColumns holds the columns for the "roads" table.
	RoadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "x", Type: field.TypeInt},
		{Name: "y", Type: field.TypeInt},
	}
	// RoadsTable holds the schema information for the "roads" table.
	RoadsTable = &schema.Table{
		Name:        "roads",
		Columns:     RoadsColumns,
		PrimaryKey:  []*schema.Column{RoadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// RobbersColumns holds the columns for the "robbers" table.
	RobbersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// RobbersTable holds the schema information for the "robbers" table.
	RobbersTable = &schema.Table{
		Name:        "robbers",
		Columns:     RobbersColumns,
		PrimaryKey:  []*schema.Column{RobbersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// SettlementsColumns holds the columns for the "settlements" table.
	SettlementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "x", Type: field.TypeInt},
		{Name: "y", Type: field.TypeInt},
		{Name: "is_city", Type: field.TypeBool},
	}
	// SettlementsTable holds the schema information for the "settlements" table.
	SettlementsTable = &schema.Table{
		Name:        "settlements",
		Columns:     SettlementsColumns,
		PrimaryKey:  []*schema.Column{SettlementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// SettlementHexesColumns holds the columns for the "settlement_hexes" table.
	SettlementHexesColumns = []*schema.Column{
		{Name: "settlement_id", Type: field.TypeInt},
		{Name: "hex_id", Type: field.TypeInt},
	}
	// SettlementHexesTable holds the schema information for the "settlement_hexes" table.
	SettlementHexesTable = &schema.Table{
		Name:       "settlement_hexes",
		Columns:    SettlementHexesColumns,
		PrimaryKey: []*schema.Column{SettlementHexesColumns[0], SettlementHexesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "settlement_hexes_settlement_id",
				Columns: []*schema.Column{SettlementHexesColumns[0]},

				RefColumns: []*schema.Column{SettlementsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "settlement_hexes_hex_id",
				Columns: []*schema.Column{SettlementHexesColumns[1]},

				RefColumns: []*schema.Column{HexesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		HarborsTable,
		HexesTable,
		NumberTokensTable,
		PlayersTable,
		RoadsTable,
		RobbersTable,
		SettlementsTable,
		SettlementHexesTable,
	}
)

func init() {
	HarborsTable.ForeignKeys[0].RefTable = SettlementsTable
	HexesTable.ForeignKeys[0].RefTable = NumberTokensTable
	HexesTable.ForeignKeys[1].RefTable = RobbersTable
	SettlementHexesTable.ForeignKeys[0].RefTable = SettlementsTable
	SettlementHexesTable.ForeignKeys[1].RefTable = HexesTable
}
