// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andrewmthomas87/catan/ent/harbor"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/settlement"
)

// SettlementCreate is the builder for creating a Settlement entity.
type SettlementCreate struct {
	config
	mutation *SettlementMutation
	hooks    []Hook
}

// SetX sets the "x" field.
func (sc *SettlementCreate) SetX(i int) *SettlementCreate {
	sc.mutation.SetX(i)
	return sc
}

// SetY sets the "y" field.
func (sc *SettlementCreate) SetY(i int) *SettlementCreate {
	sc.mutation.SetY(i)
	return sc
}

// SetIsCity sets the "is_city" field.
func (sc *SettlementCreate) SetIsCity(b bool) *SettlementCreate {
	sc.mutation.SetIsCity(b)
	return sc
}

// AddHexIDs adds the "hexes" edge to the Hex entity by IDs.
func (sc *SettlementCreate) AddHexIDs(ids ...int) *SettlementCreate {
	sc.mutation.AddHexIDs(ids...)
	return sc
}

// AddHexes adds the "hexes" edges to the Hex entity.
func (sc *SettlementCreate) AddHexes(h ...*Hex) *SettlementCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return sc.AddHexIDs(ids...)
}

// SetHarborID sets the "harbor" edge to the Harbor entity by ID.
func (sc *SettlementCreate) SetHarborID(id int) *SettlementCreate {
	sc.mutation.SetHarborID(id)
	return sc
}

// SetNillableHarborID sets the "harbor" edge to the Harbor entity by ID if the given value is not nil.
func (sc *SettlementCreate) SetNillableHarborID(id *int) *SettlementCreate {
	if id != nil {
		sc = sc.SetHarborID(*id)
	}
	return sc
}

// SetHarbor sets the "harbor" edge to the Harbor entity.
func (sc *SettlementCreate) SetHarbor(h *Harbor) *SettlementCreate {
	return sc.SetHarborID(h.ID)
}

// Mutation returns the SettlementMutation object of the builder.
func (sc *SettlementCreate) Mutation() *SettlementMutation {
	return sc.mutation
}

// Save creates the Settlement in the database.
func (sc *SettlementCreate) Save(ctx context.Context) (*Settlement, error) {
	var (
		err  error
		node *Settlement
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettlementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettlementCreate) SaveX(ctx context.Context) *Settlement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettlementCreate) check() error {
	if _, ok := sc.mutation.X(); !ok {
		return &ValidationError{Name: "x", err: errors.New("ent: missing required field \"x\"")}
	}
	if _, ok := sc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New("ent: missing required field \"y\"")}
	}
	if _, ok := sc.mutation.IsCity(); !ok {
		return &ValidationError{Name: "is_city", err: errors.New("ent: missing required field \"is_city\"")}
	}
	return nil
}

func (sc *SettlementCreate) sqlSave(ctx context.Context) (*Settlement, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SettlementCreate) createSpec() (*Settlement, *sqlgraph.CreateSpec) {
	var (
		_node = &Settlement{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: settlement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settlement.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.X(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldX,
		})
		_node.X = value
	}
	if value, ok := sc.mutation.Y(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldY,
		})
		_node.Y = value
	}
	if value, ok := sc.mutation.IsCity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: settlement.FieldIsCity,
		})
		_node.IsCity = value
	}
	if nodes := sc.mutation.HexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.HarborIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   settlement.HarborTable,
			Columns: []string{settlement.HarborColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: harbor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SettlementCreateBulk is the builder for creating many Settlement entities in bulk.
type SettlementCreateBulk struct {
	config
	builders []*SettlementCreate
}

// Save creates the Settlement entities in the database.
func (scb *SettlementCreateBulk) Save(ctx context.Context) ([]*Settlement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settlement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettlementCreateBulk) SaveX(ctx context.Context) []*Settlement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
