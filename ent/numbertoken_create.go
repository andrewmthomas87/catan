// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/numbertoken"
)

// NumberTokenCreate is the builder for creating a NumberToken entity.
type NumberTokenCreate struct {
	config
	mutation *NumberTokenMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (ntc *NumberTokenCreate) SetValue(i int) *NumberTokenCreate {
	ntc.mutation.SetValue(i)
	return ntc
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (ntc *NumberTokenCreate) SetHexID(id int) *NumberTokenCreate {
	ntc.mutation.SetHexID(id)
	return ntc
}

// SetNillableHexID sets the "hex" edge to the Hex entity by ID if the given value is not nil.
func (ntc *NumberTokenCreate) SetNillableHexID(id *int) *NumberTokenCreate {
	if id != nil {
		ntc = ntc.SetHexID(*id)
	}
	return ntc
}

// SetHex sets the "hex" edge to the Hex entity.
func (ntc *NumberTokenCreate) SetHex(h *Hex) *NumberTokenCreate {
	return ntc.SetHexID(h.ID)
}

// Mutation returns the NumberTokenMutation object of the builder.
func (ntc *NumberTokenCreate) Mutation() *NumberTokenMutation {
	return ntc.mutation
}

// Save creates the NumberToken in the database.
func (ntc *NumberTokenCreate) Save(ctx context.Context) (*NumberToken, error) {
	var (
		err  error
		node *NumberToken
	)
	if len(ntc.hooks) == 0 {
		if err = ntc.check(); err != nil {
			return nil, err
		}
		node, err = ntc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumberTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntc.check(); err != nil {
				return nil, err
			}
			ntc.mutation = mutation
			node, err = ntc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntc.hooks) - 1; i >= 0; i-- {
			mut = ntc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ntc *NumberTokenCreate) SaveX(ctx context.Context) *NumberToken {
	v, err := ntc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ntc *NumberTokenCreate) check() error {
	if _, ok := ntc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	if v, ok := ntc.mutation.Value(); ok {
		if err := numbertoken.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	return nil
}

func (ntc *NumberTokenCreate) sqlSave(ctx context.Context) (*NumberToken, error) {
	_node, _spec := ntc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ntc *NumberTokenCreate) createSpec() (*NumberToken, *sqlgraph.CreateSpec) {
	var (
		_node = &NumberToken{config: ntc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: numbertoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: numbertoken.FieldID,
			},
		}
	)
	if value, ok := ntc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: numbertoken.FieldValue,
		})
		_node.Value = value
	}
	if nodes := ntc.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   numbertoken.HexTable,
			Columns: []string{numbertoken.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NumberTokenCreateBulk is the builder for creating many NumberToken entities in bulk.
type NumberTokenCreateBulk struct {
	config
	builders []*NumberTokenCreate
}

// Save creates the NumberToken entities in the database.
func (ntcb *NumberTokenCreateBulk) Save(ctx context.Context) ([]*NumberToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ntcb.builders))
	nodes := make([]*NumberToken, len(ntcb.builders))
	mutators := make([]Mutator, len(ntcb.builders))
	for i := range ntcb.builders {
		func(i int, root context.Context) {
			builder := ntcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NumberTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntcb *NumberTokenCreateBulk) SaveX(ctx context.Context) []*NumberToken {
	v, err := ntcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
