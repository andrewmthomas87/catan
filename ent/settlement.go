// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/andrewmthomas87/catan/ent/harbor"
	"github.com/andrewmthomas87/catan/ent/settlement"
)

// Settlement is the model entity for the Settlement schema.
type Settlement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// X holds the value of the "x" field.
	X int `json:"x,omitempty"`
	// Y holds the value of the "y" field.
	Y int `json:"y,omitempty"`
	// IsCity holds the value of the "is_city" field.
	IsCity bool `json:"is_city,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SettlementQuery when eager-loading is set.
	Edges SettlementEdges `json:"edges"`
}

// SettlementEdges holds the relations/edges for other nodes in the graph.
type SettlementEdges struct {
	// Hexes holds the value of the hexes edge.
	Hexes []*Hex `json:"hexes,omitempty"`
	// Harbor holds the value of the harbor edge.
	Harbor *Harbor `json:"harbor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HexesOrErr returns the Hexes value or an error if the edge
// was not loaded in eager-loading.
func (e SettlementEdges) HexesOrErr() ([]*Hex, error) {
	if e.loadedTypes[0] {
		return e.Hexes, nil
	}
	return nil, &NotLoadedError{edge: "hexes"}
}

// HarborOrErr returns the Harbor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SettlementEdges) HarborOrErr() (*Harbor, error) {
	if e.loadedTypes[1] {
		if e.Harbor == nil {
			// The edge harbor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: harbor.Label}
		}
		return e.Harbor, nil
	}
	return nil, &NotLoadedError{edge: "harbor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settlement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case settlement.FieldIsCity:
			values[i] = &sql.NullBool{}
		case settlement.FieldID, settlement.FieldX, settlement.FieldY:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Settlement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settlement fields.
func (s *Settlement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settlement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case settlement.FieldX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				s.X = int(value.Int64)
			}
		case settlement.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				s.Y = int(value.Int64)
			}
		case settlement.FieldIsCity:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_city", values[i])
			} else if value.Valid {
				s.IsCity = value.Bool
			}
		}
	}
	return nil
}

// QueryHexes queries the "hexes" edge of the Settlement entity.
func (s *Settlement) QueryHexes() *HexQuery {
	return (&SettlementClient{config: s.config}).QueryHexes(s)
}

// QueryHarbor queries the "harbor" edge of the Settlement entity.
func (s *Settlement) QueryHarbor() *HarborQuery {
	return (&SettlementClient{config: s.config}).QueryHarbor(s)
}

// Update returns a builder for updating this Settlement.
// Note that you need to call Settlement.Unwrap() before calling this method if this Settlement
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Settlement) Update() *SettlementUpdateOne {
	return (&SettlementClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Settlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Settlement) Unwrap() *Settlement {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settlement is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Settlement) String() string {
	var builder strings.Builder
	builder.WriteString("Settlement(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", x=")
	builder.WriteString(fmt.Sprintf("%v", s.X))
	builder.WriteString(", y=")
	builder.WriteString(fmt.Sprintf("%v", s.Y))
	builder.WriteString(", is_city=")
	builder.WriteString(fmt.Sprintf("%v", s.IsCity))
	builder.WriteByte(')')
	return builder.String()
}

// Settlements is a parsable slice of Settlement.
type Settlements []*Settlement

func (s Settlements) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
