// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/andrewmthomas87/catan/ent/harbor"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/predicate"
	"github.com/andrewmthomas87/catan/ent/settlement"
)

// SettlementUpdate is the builder for updating Settlement entities.
type SettlementUpdate struct {
	config
	hooks    []Hook
	mutation *SettlementMutation
}

// Where adds a new predicate for the SettlementUpdate builder.
func (su *SettlementUpdate) Where(ps ...predicate.Settlement) *SettlementUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetX sets the "x" field.
func (su *SettlementUpdate) SetX(i int) *SettlementUpdate {
	su.mutation.ResetX()
	su.mutation.SetX(i)
	return su
}

// AddX adds i to the "x" field.
func (su *SettlementUpdate) AddX(i int) *SettlementUpdate {
	su.mutation.AddX(i)
	return su
}

// SetY sets the "y" field.
func (su *SettlementUpdate) SetY(i int) *SettlementUpdate {
	su.mutation.ResetY()
	su.mutation.SetY(i)
	return su
}

// AddY adds i to the "y" field.
func (su *SettlementUpdate) AddY(i int) *SettlementUpdate {
	su.mutation.AddY(i)
	return su
}

// SetIsCity sets the "is_city" field.
func (su *SettlementUpdate) SetIsCity(b bool) *SettlementUpdate {
	su.mutation.SetIsCity(b)
	return su
}

// AddHexIDs adds the "hexes" edge to the Hex entity by IDs.
func (su *SettlementUpdate) AddHexIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddHexIDs(ids...)
	return su
}

// AddHexes adds the "hexes" edges to the Hex entity.
func (su *SettlementUpdate) AddHexes(h ...*Hex) *SettlementUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return su.AddHexIDs(ids...)
}

// SetHarborID sets the "harbor" edge to the Harbor entity by ID.
func (su *SettlementUpdate) SetHarborID(id int) *SettlementUpdate {
	su.mutation.SetHarborID(id)
	return su
}

// SetNillableHarborID sets the "harbor" edge to the Harbor entity by ID if the given value is not nil.
func (su *SettlementUpdate) SetNillableHarborID(id *int) *SettlementUpdate {
	if id != nil {
		su = su.SetHarborID(*id)
	}
	return su
}

// SetHarbor sets the "harbor" edge to the Harbor entity.
func (su *SettlementUpdate) SetHarbor(h *Harbor) *SettlementUpdate {
	return su.SetHarborID(h.ID)
}

// Mutation returns the SettlementMutation object of the builder.
func (su *SettlementUpdate) Mutation() *SettlementMutation {
	return su.mutation
}

// ClearHexes clears all "hexes" edges to the Hex entity.
func (su *SettlementUpdate) ClearHexes() *SettlementUpdate {
	su.mutation.ClearHexes()
	return su
}

// RemoveHexIDs removes the "hexes" edge to Hex entities by IDs.
func (su *SettlementUpdate) RemoveHexIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveHexIDs(ids...)
	return su
}

// RemoveHexes removes "hexes" edges to Hex entities.
func (su *SettlementUpdate) RemoveHexes(h ...*Hex) *SettlementUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return su.RemoveHexIDs(ids...)
}

// ClearHarbor clears the "harbor" edge to the Harbor entity.
func (su *SettlementUpdate) ClearHarbor() *SettlementUpdate {
	su.mutation.ClearHarbor()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettlementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettlementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettlementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettlementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettlementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SettlementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   settlement.Table,
			Columns: settlement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settlement.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldX,
		})
	}
	if value, ok := su.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldX,
		})
	}
	if value, ok := su.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldY,
		})
	}
	if value, ok := su.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldY,
		})
	}
	if value, ok := su.mutation.IsCity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: settlement.FieldIsCity,
		})
	}
	if su.mutation.HexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedHexesIDs(); len(nodes) > 0 && !su.mutation.HexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.HarborCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   settlement.HarborTable,
			Columns: []string{settlement.HarborColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: harbor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HarborIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   settlement.HarborTable,
			Columns: []string{settlement.HarborColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: harbor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settlement.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SettlementUpdateOne is the builder for updating a single Settlement entity.
type SettlementUpdateOne struct {
	config
	hooks    []Hook
	mutation *SettlementMutation
}

// SetX sets the "x" field.
func (suo *SettlementUpdateOne) SetX(i int) *SettlementUpdateOne {
	suo.mutation.ResetX()
	suo.mutation.SetX(i)
	return suo
}

// AddX adds i to the "x" field.
func (suo *SettlementUpdateOne) AddX(i int) *SettlementUpdateOne {
	suo.mutation.AddX(i)
	return suo
}

// SetY sets the "y" field.
func (suo *SettlementUpdateOne) SetY(i int) *SettlementUpdateOne {
	suo.mutation.ResetY()
	suo.mutation.SetY(i)
	return suo
}

// AddY adds i to the "y" field.
func (suo *SettlementUpdateOne) AddY(i int) *SettlementUpdateOne {
	suo.mutation.AddY(i)
	return suo
}

// SetIsCity sets the "is_city" field.
func (suo *SettlementUpdateOne) SetIsCity(b bool) *SettlementUpdateOne {
	suo.mutation.SetIsCity(b)
	return suo
}

// AddHexIDs adds the "hexes" edge to the Hex entity by IDs.
func (suo *SettlementUpdateOne) AddHexIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddHexIDs(ids...)
	return suo
}

// AddHexes adds the "hexes" edges to the Hex entity.
func (suo *SettlementUpdateOne) AddHexes(h ...*Hex) *SettlementUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return suo.AddHexIDs(ids...)
}

// SetHarborID sets the "harbor" edge to the Harbor entity by ID.
func (suo *SettlementUpdateOne) SetHarborID(id int) *SettlementUpdateOne {
	suo.mutation.SetHarborID(id)
	return suo
}

// SetNillableHarborID sets the "harbor" edge to the Harbor entity by ID if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableHarborID(id *int) *SettlementUpdateOne {
	if id != nil {
		suo = suo.SetHarborID(*id)
	}
	return suo
}

// SetHarbor sets the "harbor" edge to the Harbor entity.
func (suo *SettlementUpdateOne) SetHarbor(h *Harbor) *SettlementUpdateOne {
	return suo.SetHarborID(h.ID)
}

// Mutation returns the SettlementMutation object of the builder.
func (suo *SettlementUpdateOne) Mutation() *SettlementMutation {
	return suo.mutation
}

// ClearHexes clears all "hexes" edges to the Hex entity.
func (suo *SettlementUpdateOne) ClearHexes() *SettlementUpdateOne {
	suo.mutation.ClearHexes()
	return suo
}

// RemoveHexIDs removes the "hexes" edge to Hex entities by IDs.
func (suo *SettlementUpdateOne) RemoveHexIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveHexIDs(ids...)
	return suo
}

// RemoveHexes removes "hexes" edges to Hex entities.
func (suo *SettlementUpdateOne) RemoveHexes(h ...*Hex) *SettlementUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return suo.RemoveHexIDs(ids...)
}

// ClearHarbor clears the "harbor" edge to the Harbor entity.
func (suo *SettlementUpdateOne) ClearHarbor() *SettlementUpdateOne {
	suo.mutation.ClearHarbor()
	return suo
}

// Save executes the query and returns the updated Settlement entity.
func (suo *SettlementUpdateOne) Save(ctx context.Context) (*Settlement, error) {
	var (
		err  error
		node *Settlement
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettlementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettlementUpdateOne) SaveX(ctx context.Context) *Settlement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettlementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettlementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SettlementUpdateOne) sqlSave(ctx context.Context) (_node *Settlement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   settlement.Table,
			Columns: settlement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settlement.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Settlement.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.X(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldX,
		})
	}
	if value, ok := suo.mutation.AddedX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldX,
		})
	}
	if value, ok := suo.mutation.Y(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldY,
		})
	}
	if value, ok := suo.mutation.AddedY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settlement.FieldY,
		})
	}
	if value, ok := suo.mutation.IsCity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: settlement.FieldIsCity,
		})
	}
	if suo.mutation.HexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedHexesIDs(); len(nodes) > 0 && !suo.mutation.HexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.HexesTable,
			Columns: settlement.HexesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.HarborCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   settlement.HarborTable,
			Columns: []string{settlement.HarborColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: harbor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HarborIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   settlement.HarborTable,
			Columns: []string{settlement.HarborColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: harbor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Settlement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settlement.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
