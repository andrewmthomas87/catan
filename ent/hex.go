// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/andrewmthomas87/catan/ent/hex"
	"github.com/andrewmthomas87/catan/ent/numbertoken"
	"github.com/andrewmthomas87/catan/ent/robber"
)

// Hex is the model entity for the Hex schema.
type Hex struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// X holds the value of the "x" field.
	X int `json:"x,omitempty"`
	// Y holds the value of the "y" field.
	Y int `json:"y,omitempty"`
	// Terrain holds the value of the "terrain" field.
	Terrain hex.Terrain `json:"terrain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HexQuery when eager-loading is set.
	Edges            HexEdges `json:"edges"`
	number_token_hex *int
	robber_hex       *int
}

// HexEdges holds the relations/edges for other nodes in the graph.
type HexEdges struct {
	// NumberToken holds the value of the number_token edge.
	NumberToken *NumberToken `json:"number_token,omitempty"`
	// Robber holds the value of the robber edge.
	Robber *Robber `json:"robber,omitempty"`
	// Settlements holds the value of the settlements edge.
	Settlements []*Settlement `json:"settlements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NumberTokenOrErr returns the NumberToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HexEdges) NumberTokenOrErr() (*NumberToken, error) {
	if e.loadedTypes[0] {
		if e.NumberToken == nil {
			// The edge number_token was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: numbertoken.Label}
		}
		return e.NumberToken, nil
	}
	return nil, &NotLoadedError{edge: "number_token"}
}

// RobberOrErr returns the Robber value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HexEdges) RobberOrErr() (*Robber, error) {
	if e.loadedTypes[1] {
		if e.Robber == nil {
			// The edge robber was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: robber.Label}
		}
		return e.Robber, nil
	}
	return nil, &NotLoadedError{edge: "robber"}
}

// SettlementsOrErr returns the Settlements value or an error if the edge
// was not loaded in eager-loading.
func (e HexEdges) SettlementsOrErr() ([]*Settlement, error) {
	if e.loadedTypes[2] {
		return e.Settlements, nil
	}
	return nil, &NotLoadedError{edge: "settlements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hex) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hex.FieldID, hex.FieldX, hex.FieldY:
			values[i] = &sql.NullInt64{}
		case hex.FieldTerrain:
			values[i] = &sql.NullString{}
		case hex.ForeignKeys[0]: // number_token_hex
			values[i] = &sql.NullInt64{}
		case hex.ForeignKeys[1]: // robber_hex
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hex", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hex fields.
func (h *Hex) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hex.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case hex.FieldX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field x", values[i])
			} else if value.Valid {
				h.X = int(value.Int64)
			}
		case hex.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				h.Y = int(value.Int64)
			}
		case hex.FieldTerrain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field terrain", values[i])
			} else if value.Valid {
				h.Terrain = hex.Terrain(value.String)
			}
		case hex.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field number_token_hex", value)
			} else if value.Valid {
				h.number_token_hex = new(int)
				*h.number_token_hex = int(value.Int64)
			}
		case hex.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field robber_hex", value)
			} else if value.Valid {
				h.robber_hex = new(int)
				*h.robber_hex = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryNumberToken queries the "number_token" edge of the Hex entity.
func (h *Hex) QueryNumberToken() *NumberTokenQuery {
	return (&HexClient{config: h.config}).QueryNumberToken(h)
}

// QueryRobber queries the "robber" edge of the Hex entity.
func (h *Hex) QueryRobber() *RobberQuery {
	return (&HexClient{config: h.config}).QueryRobber(h)
}

// QuerySettlements queries the "settlements" edge of the Hex entity.
func (h *Hex) QuerySettlements() *SettlementQuery {
	return (&HexClient{config: h.config}).QuerySettlements(h)
}

// Update returns a builder for updating this Hex.
// Note that you need to call Hex.Unwrap() before calling this method if this Hex
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hex) Update() *HexUpdateOne {
	return (&HexClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hex) Unwrap() *Hex {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hex is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hex) String() string {
	var builder strings.Builder
	builder.WriteString("Hex(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", x=")
	builder.WriteString(fmt.Sprintf("%v", h.X))
	builder.WriteString(", y=")
	builder.WriteString(fmt.Sprintf("%v", h.Y))
	builder.WriteString(", terrain=")
	builder.WriteString(fmt.Sprintf("%v", h.Terrain))
	builder.WriteByte(')')
	return builder.String()
}

// Hexes is a parsable slice of Hex.
type Hexes []*Hex

func (h Hexes) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
